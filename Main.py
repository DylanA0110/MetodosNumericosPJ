import sys
import os
import sympy as sp
import numpy as np

# A√±adir rutas de m√≥dulos
sys.path.append(os.path.abspath('Metodos_Abiertos'))
sys.path.append(os.path.abspath('Utils'))

# Importar funciones personalizadas
from Metodos_Abiertos.punto_fijo import punto_fijo
from Metodos_Abiertos.newton_raphson import newton_raphson
from Metodos_Abiertos.secante import secante
from Utils.graficador import graficar_errores
from Utils.exportador import exportar_excel

# Definir s√≠mbolo simb√≥lico
x = sp.Symbol('x')

# üëâ Entrada de la funci√≥n principal f(x)
funcion_input = input("Ingresa la funci√≥n f(x): ")
f_expr = sp.sympify(funcion_input)

# üëâ Derivada de la funci√≥n
df_expr = sp.diff(f_expr, x)

# üëâ Convertir las expresiones simb√≥licas a funciones num√©ricas
f = sp.lambdify(x, f_expr, "numpy")
df = sp.lambdify(x, df_expr, "numpy")

# üëâ M√©todo a usar
metodo = input("Elige un m√©todo (punto_fijo, newton_raphson, secante, sistemas): ").strip()

if metodo == "sistemas":
    n = int(input("¬øCu√°ntas variables tiene el sistema?: "))
    variables = sp.symbols(f'x1:{n+1}')
    
    funciones_input = [input(f"Ingrese la funci√≥n f{i+1}(x): ") for i in range(n)]
    funciones_expr = [sp.sympify(expr) for expr in funciones_input]
    jacobiana_expr = sp.Matrix(funciones_expr).jacobian(variables)

    F = sp.lambdify([variables], funciones_expr, 'numpy')
    J = sp.lambdify([variables], jacobiana_expr, 'numpy')

    x0 = [float(input(f"Ingresa x{i+1}_0: ")) for i in range(n)]

    resultados, solucion = newton_raphson_sistemas(F, J, x0, tol)

    exportar_excel(resultados, metodo="sistemas", funcion_str_expr=funciones_expr)
# Si es punto fijo, tambi√©n pide g(x)
g_expr = None
g = None
if metodo == "punto_fijo":
    g_input = input("Ingresa la funci√≥n g(x): ")
    g_expr = sp.sympify(g_input)
    g = sp.lambdify(x, g_expr, "numpy")

# üëâ Valores iniciales
x00 = float(input("Ingresa el valor inicial x0: "))
x11 = None
if metodo == "secante":
    x11 = float(input("Ingresa el segundo valor inicial x1: "))

# üëâ Tolerancia fija
tol = 0.01
print("Usando tolerancia fija: 0.01")
    
    # üßÆ Ejecutar m√©todo seg√∫n selecci√≥n
if metodo == "punto_fijo":
    resultados = punto_fijo(g, x00, tol)
    graficar_errores(resultados, "Punto Fijo")
    exportar_excel(resultados, metodo="punto_fijo", funcion_str_expr=g_expr)

elif metodo == "newton_raphson":
    resultados, raiz = newton_raphson(f, df, x00, tol)  # Pasando las funciones num√©ricas
    graficar_errores(resultados, "Newton-Raphson")
    exportar_excel(resultados, metodo="newton_raphson", funcion_str_expr=f_expr)

elif metodo == "secante":
    resultados = secante(f, x00, x11, tol)
    graficar_errores(resultados, "Secante")
    exportar_excel(resultados, metodo="secante", funcion_str_expr=f_expr)

else:
    print("‚ùå M√©todo no v√°lido.")
